// <auto-generated />
using System;
using HealthRecord.Infrastructure.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HealthRecord.Infrastructure.Migrations
{
    [DbContext(typeof(HealthRecordDbContext))]
    [Migration("20210520063529_m30")]
    partial class m30
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HealthRecord.Domain.Animal.Animal", b =>
                {
                    b.Property<Guid>("AnimalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnimalId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("HealthRecord.Domain.Disease.Disease", b =>
                {
                    b.Property<Guid>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealtRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiseaseId");

                    b.HasIndex("HealtRecordId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("HealthRecord.Domain.HealthCertificate.HealthCertificate", b =>
                {
                    b.Property<Guid>("HealthCertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthCertificateId");

                    b.HasIndex("HealthRecordId");

                    b.ToTable("HealthCertificates");
                });

            modelBuilder.Entity("HealthRecord.Domain.HealthRecord.HealthRecord", b =>
                {
                    b.Property<Guid>("HealthRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthRecordId");

                    b.HasIndex("AnimalId")
                        .IsUnique();

                    b.ToTable("HealthRecord");
                });

            modelBuilder.Entity("HealthRecord.Domain.Vaccination.Vaccination", b =>
                {
                    b.Property<Guid>("VaccinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VaccinationId");

                    b.HasIndex("HealthRecordId");

                    b.ToTable("Vaccinations");
                });

            modelBuilder.Entity("HealthRecord.Domain.Animal.Animal", b =>
                {
                    b.OwnsOne("HealthRecord.Domain.Animal.AnimalId", "Id", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.OwnsOne("HealthRecord.Domain.Animal.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.OwnsOne("HealthRecord.Domain.Animal.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.OwnsOne("HealthRecord.Domain.Animal.OwnerId", "OwnerId", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("Name");

                    b.Navigation("OwnerId");
                });

            modelBuilder.Entity("HealthRecord.Domain.Disease.Disease", b =>
                {
                    b.HasOne("HealthRecord.Domain.HealthRecord.HealthRecord", "HealthRecord")
                        .WithMany("Diseases")
                        .HasForeignKey("HealtRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HealthRecord.Domain.Disease.Date", "Date", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("HealthRecord.Domain.Disease.DiseaseId", "Id", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("HealthRecord.Domain.Disease.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("HealthRecord.Domain.Disease.IsHereditary", "IsHereditary", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("HealthRecord.Domain.Disease.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("HealthRecord.Domain.Disease.Note", "Note", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("HealthRecord.Domain.Disease.Probability", "Probability", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Value")
                                .HasColumnType("float");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.Navigation("Date");

                    b.Navigation("HealthRecord");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("IsHereditary");

                    b.Navigation("Name");

                    b.Navigation("Note");

                    b.Navigation("Probability");
                });

            modelBuilder.Entity("HealthRecord.Domain.HealthCertificate.HealthCertificate", b =>
                {
                    b.HasOne("HealthRecord.Domain.HealthRecord.HealthRecord", "HealthRecord")
                        .WithMany("HealthCertificates")
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HealthRecord.Domain.HealthCertificate.Date", "Date", b1 =>
                        {
                            b1.Property<Guid>("HealthCertificateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("HealthCertificateId");

                            b1.ToTable("HealthCertificates");

                            b1.WithOwner()
                                .HasForeignKey("HealthCertificateId");
                        });

                    b.OwnsOne("HealthRecord.Domain.HealthCertificate.HealthCertificateId", "Id", b1 =>
                        {
                            b1.Property<Guid>("HealthCertificateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("HealthCertificateId");

                            b1.ToTable("HealthCertificates");

                            b1.WithOwner()
                                .HasForeignKey("HealthCertificateId");
                        });

                    b.OwnsOne("HealthRecord.Domain.HealthCertificate.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("HealthCertificateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("HealthCertificateId");

                            b1.ToTable("HealthCertificates");

                            b1.WithOwner()
                                .HasForeignKey("HealthCertificateId");
                        });

                    b.OwnsOne("HealthRecord.Domain.HealthCertificate.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("HealthCertificateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("HealthCertificateId");

                            b1.ToTable("HealthCertificates");

                            b1.WithOwner()
                                .HasForeignKey("HealthCertificateId");
                        });

                    b.OwnsOne("HealthRecord.Domain.HealthCertificate.Note", "Note", b1 =>
                        {
                            b1.Property<Guid>("HealthCertificateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("HealthCertificateId");

                            b1.ToTable("HealthCertificates");

                            b1.WithOwner()
                                .HasForeignKey("HealthCertificateId");
                        });

                    b.Navigation("Date");

                    b.Navigation("HealthRecord");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("Name");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("HealthRecord.Domain.HealthRecord.HealthRecord", b =>
                {
                    b.HasOne("HealthRecord.Domain.Animal.Animal", "Animal")
                        .WithOne("HealthRecord")
                        .HasForeignKey("HealthRecord.Domain.HealthRecord.HealthRecord", "AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HealthRecord.Domain.HealthRecord.HealthRecordId", "Id", b1 =>
                        {
                            b1.Property<Guid>("HealthRecordId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("HealthRecordId");

                            b1.ToTable("HealthRecord");

                            b1.WithOwner()
                                .HasForeignKey("HealthRecordId");
                        });

                    b.Navigation("Animal");

                    b.Navigation("Id");
                });

            modelBuilder.Entity("HealthRecord.Domain.Vaccination.Vaccination", b =>
                {
                    b.HasOne("HealthRecord.Domain.HealthRecord.HealthRecord", "HealthRecord")
                        .WithMany("Vaccinations")
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HealthRecord.Domain.Vaccination.Date", "Date", b1 =>
                        {
                            b1.Property<Guid>("VaccinationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("VaccinationId");

                            b1.ToTable("Vaccinations");

                            b1.WithOwner()
                                .HasForeignKey("VaccinationId");
                        });

                    b.OwnsOne("HealthRecord.Domain.Vaccination.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("VaccinationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("VaccinationId");

                            b1.ToTable("Vaccinations");

                            b1.WithOwner()
                                .HasForeignKey("VaccinationId");
                        });

                    b.OwnsOne("HealthRecord.Domain.Vaccination.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("VaccinationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("VaccinationId");

                            b1.ToTable("Vaccinations");

                            b1.WithOwner()
                                .HasForeignKey("VaccinationId");
                        });

                    b.OwnsOne("HealthRecord.Domain.Vaccination.VaccinationId", "Id", b1 =>
                        {
                            b1.Property<Guid>("VaccinationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("VaccinationId");

                            b1.ToTable("Vaccinations");

                            b1.WithOwner()
                                .HasForeignKey("VaccinationId");
                        });

                    b.Navigation("Date");

                    b.Navigation("HealthRecord");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("HealthRecord.Domain.Animal.Animal", b =>
                {
                    b.Navigation("HealthRecord");
                });

            modelBuilder.Entity("HealthRecord.Domain.HealthRecord.HealthRecord", b =>
                {
                    b.Navigation("Diseases");

                    b.Navigation("HealthCertificates");

                    b.Navigation("Vaccinations");
                });
#pragma warning restore 612, 618
        }
    }
}
