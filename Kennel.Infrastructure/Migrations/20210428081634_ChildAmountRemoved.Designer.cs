// <auto-generated />
using System;
using Kennel.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kennel.Infrastructure.Migrations
{
    [DbContext(typeof(KennelDbContext))]
    [Migration("20210428081634_ChildAmountRemoved")]
    partial class ChildAmountRemoved
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Kennel.Domain.Animal.Animal", b =>
                {
                    b.Property<Guid>("AnimalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProtokolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnimalId");

                    b.HasIndex("ProtokolId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("Kennel.Domain.AnimalLitter.AnimalLitter", b =>
                {
                    b.Property<Guid>("AnimalLitterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LitterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnimalLitterId");

                    b.HasIndex("AnimalId");

                    b.HasIndex("LitterId");

                    b.ToTable("AnimalLitters");
                });

            modelBuilder.Entity("Kennel.Domain.Disease.Disease", b =>
                {
                    b.Property<Guid>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiseaseId");

                    b.HasIndex("HealthRecordId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("Kennel.Domain.HealthCertificate.HealthCertificate", b =>
                {
                    b.Property<Guid>("HealthCertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthCertificateId");

                    b.HasIndex("HealthRecordId");

                    b.ToTable("HealthCertificates");
                });

            modelBuilder.Entity("Kennel.Domain.HealthRecord.HealthRecord", b =>
                {
                    b.Property<Guid>("HealthRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HealthRecordId");

                    b.HasIndex("AnimalId")
                        .IsUnique();

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("Kennel.Domain.Kennel.Kennel", b =>
                {
                    b.Property<Guid>("KennelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KennelId");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("Kennels");
                });

            modelBuilder.Entity("Kennel.Domain.Litter.Litter", b =>
                {
                    b.Property<Guid>("LitterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LitterId");

                    b.ToTable("Litters");
                });

            modelBuilder.Entity("Kennel.Domain.Owner.Owner", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OwnerId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Kennel.Domain.Protokol.Protokol", b =>
                {
                    b.Property<Guid>("ProtokolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KennelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProtokolId");

                    b.HasIndex("KennelId")
                        .IsUnique();

                    b.ToTable("Protokols");
                });

            modelBuilder.Entity("Kennel.Domain.Vaccination.Vaccination", b =>
                {
                    b.Property<Guid>("VaccinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VaccinationId");

                    b.HasIndex("HealthRecordId");

                    b.ToTable("Vaccinations");
                });

            modelBuilder.Entity("Kennel.Domain.Animal.Animal", b =>
                {
                    b.HasOne("Kennel.Domain.Protokol.Protokol", "Protokol")
                        .WithMany("Animals")
                        .HasForeignKey("ProtokolId");

                    b.OwnsOne("Kennel.Domain.Animal.AnimalId", "Id", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.OwnsOne("Kennel.Domain.Animal.BirthDate", "BirthDate", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.OwnsOne("Kennel.Domain.Animal.Color", "Color", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.OwnsOne("Kennel.Domain.Animal.DeathDate", "DeathDate", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.OwnsOne("Kennel.Domain.Animal.Gender", "Gender", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.OwnsOne("Kennel.Domain.Animal.IsBreedable", "IsBreedable", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.OwnsOne("Kennel.Domain.Animal.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.OwnsOne("Kennel.Domain.Animal.PedigreeName", "PedigreeName", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.OwnsOne("Kennel.Domain.Animal.RegNo", "RegNo", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.OwnsOne("Kennel.Domain.Animal.SubRaceId", "SubRaceId", b1 =>
                        {
                            b1.Property<Guid>("AnimalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AnimalId");

                            b1.ToTable("Animals");

                            b1.WithOwner()
                                .HasForeignKey("AnimalId");
                        });

                    b.Navigation("BirthDate");

                    b.Navigation("Color");

                    b.Navigation("DeathDate");

                    b.Navigation("Gender");

                    b.Navigation("Id");

                    b.Navigation("IsBreedable");

                    b.Navigation("IsDeleted");

                    b.Navigation("PedigreeName");

                    b.Navigation("Protokol");

                    b.Navigation("RegNo");

                    b.Navigation("SubRaceId");
                });

            modelBuilder.Entity("Kennel.Domain.AnimalLitter.AnimalLitter", b =>
                {
                    b.HasOne("Kennel.Domain.Animal.Animal", "Animal")
                        .WithMany("Litters")
                        .HasForeignKey("AnimalId");

                    b.HasOne("Kennel.Domain.Litter.Litter", "Litter")
                        .WithMany("Parrents")
                        .HasForeignKey("LitterId");

                    b.OwnsOne("Kennel.Domain.AnimalLitter.AnimalLitterId", "Id", b1 =>
                        {
                            b1.Property<Guid>("AnimalLitterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("AnimalLitterId");

                            b1.ToTable("AnimalLitters");

                            b1.WithOwner()
                                .HasForeignKey("AnimalLitterId");
                        });

                    b.OwnsOne("Kennel.Domain.AnimalLitter.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("AnimalLitterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("AnimalLitterId");

                            b1.ToTable("AnimalLitters");

                            b1.WithOwner()
                                .HasForeignKey("AnimalLitterId");
                        });

                    b.Navigation("Animal");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("Litter");
                });

            modelBuilder.Entity("Kennel.Domain.Disease.Disease", b =>
                {
                    b.HasOne("Kennel.Domain.HealthRecord.HealthRecord", "HealthRecord")
                        .WithMany("Diseases")
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Kennel.Domain.Disease.DiseaseDate", "DiseaseDate", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("Kennel.Domain.Disease.DiseaseId", "Id", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("Kennel.Domain.Disease.DiseaseName", "DiseaseName", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("Kennel.Domain.Disease.DiseaseNote", "DiseaseNote", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("Kennel.Domain.Disease.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("Kennel.Domain.Disease.IsHereditary", "IsHereditary", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.Navigation("DiseaseDate");

                    b.Navigation("DiseaseName");

                    b.Navigation("DiseaseNote");

                    b.Navigation("HealthRecord");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("IsHereditary");
                });

            modelBuilder.Entity("Kennel.Domain.HealthCertificate.HealthCertificate", b =>
                {
                    b.HasOne("Kennel.Domain.HealthRecord.HealthRecord", "HealthRecord")
                        .WithMany("HealthCertificates")
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Kennel.Domain.HealthCertificate.HealthCertificateDate", "HealthCertificateDate", b1 =>
                        {
                            b1.Property<Guid>("HealthCertificateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("HealthCertificateId");

                            b1.ToTable("HealthCertificates");

                            b1.WithOwner()
                                .HasForeignKey("HealthCertificateId");
                        });

                    b.OwnsOne("Kennel.Domain.HealthCertificate.HealthCertificateId", "Id", b1 =>
                        {
                            b1.Property<Guid>("HealthCertificateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("HealthCertificateId");

                            b1.ToTable("HealthCertificates");

                            b1.WithOwner()
                                .HasForeignKey("HealthCertificateId");
                        });

                    b.OwnsOne("Kennel.Domain.HealthCertificate.HealthCertificateName", "HealthCertificateName", b1 =>
                        {
                            b1.Property<Guid>("HealthCertificateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("HealthCertificateId");

                            b1.ToTable("HealthCertificates");

                            b1.WithOwner()
                                .HasForeignKey("HealthCertificateId");
                        });

                    b.OwnsOne("Kennel.Domain.HealthCertificate.HealthCertificateNote", "HealthCertificateNote", b1 =>
                        {
                            b1.Property<Guid>("HealthCertificateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("HealthCertificateId");

                            b1.ToTable("HealthCertificates");

                            b1.WithOwner()
                                .HasForeignKey("HealthCertificateId");
                        });

                    b.OwnsOne("Kennel.Domain.HealthCertificate.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("HealthCertificateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("HealthCertificateId");

                            b1.ToTable("HealthCertificates");

                            b1.WithOwner()
                                .HasForeignKey("HealthCertificateId");
                        });

                    b.Navigation("HealthCertificateDate");

                    b.Navigation("HealthCertificateName");

                    b.Navigation("HealthCertificateNote");

                    b.Navigation("HealthRecord");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");
                });

            modelBuilder.Entity("Kennel.Domain.HealthRecord.HealthRecord", b =>
                {
                    b.HasOne("Kennel.Domain.Animal.Animal", "Animal")
                        .WithOne("HealthRecord")
                        .HasForeignKey("Kennel.Domain.HealthRecord.HealthRecord", "AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Kennel.Domain.HealthRecord.HealthRecordId", "Id", b1 =>
                        {
                            b1.Property<Guid>("HealthRecordId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("HealthRecordId");

                            b1.ToTable("HealthRecords");

                            b1.WithOwner()
                                .HasForeignKey("HealthRecordId");
                        });

                    b.OwnsOne("Kennel.Domain.HealthRecord.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("HealthRecordId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("HealthRecordId");

                            b1.ToTable("HealthRecords");

                            b1.WithOwner()
                                .HasForeignKey("HealthRecordId");
                        });

                    b.Navigation("Animal");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");
                });

            modelBuilder.Entity("Kennel.Domain.Kennel.Kennel", b =>
                {
                    b.HasOne("Kennel.Domain.Owner.Owner", "Owner")
                        .WithOne("Kennel")
                        .HasForeignKey("Kennel.Domain.Kennel.Kennel", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Kennel.Domain.Kennel.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("KennelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("KennelId");

                            b1.ToTable("Kennels");

                            b1.WithOwner()
                                .HasForeignKey("KennelId");
                        });

                    b.OwnsOne("Kennel.Domain.Kennel.KennelId", "Id", b1 =>
                        {
                            b1.Property<Guid>("KennelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("KennelId");

                            b1.ToTable("Kennels");

                            b1.WithOwner()
                                .HasForeignKey("KennelId");
                        });

                    b.OwnsOne("Kennel.Domain.Kennel.KennelName", "KennelName", b1 =>
                        {
                            b1.Property<Guid>("KennelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("KennelId");

                            b1.ToTable("Kennels");

                            b1.WithOwner()
                                .HasForeignKey("KennelId");
                        });

                    b.OwnsOne("Kennel.Domain.Kennel.KennelSmiley", "KennelSmiley", b1 =>
                        {
                            b1.Property<Guid>("KennelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("KennelId");

                            b1.ToTable("Kennels");

                            b1.WithOwner()
                                .HasForeignKey("KennelId");
                        });

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("KennelName");

                    b.Navigation("KennelSmiley");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Kennel.Domain.Litter.Litter", b =>
                {
                    b.OwnsOne("Kennel.Domain.Litter.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("LitterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("LitterId");

                            b1.ToTable("Litters");

                            b1.WithOwner()
                                .HasForeignKey("LitterId");
                        });

                    b.OwnsOne("Kennel.Domain.Litter.LitterBirthDate", "LitterBirthDate", b1 =>
                        {
                            b1.Property<Guid>("LitterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("LitterId");

                            b1.ToTable("Litters");

                            b1.WithOwner()
                                .HasForeignKey("LitterId");
                        });

                    b.OwnsOne("Kennel.Domain.Litter.LitterId", "Id", b1 =>
                        {
                            b1.Property<Guid>("LitterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("LitterId");

                            b1.ToTable("Litters");

                            b1.WithOwner()
                                .HasForeignKey("LitterId");
                        });

                    b.OwnsOne("Kennel.Domain.Litter.LitterName", "LitterName", b1 =>
                        {
                            b1.Property<Guid>("LitterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LitterId");

                            b1.ToTable("Litters");

                            b1.WithOwner()
                                .HasForeignKey("LitterId");
                        });

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("LitterBirthDate");

                    b.Navigation("LitterName");
                });

            modelBuilder.Entity("Kennel.Domain.Owner.Owner", b =>
                {
                    b.OwnsOne("Kennel.Domain.Owner.City", "City", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Kennel.Domain.Owner.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Kennel.Domain.Owner.FirstName", "FirstName", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Kennel.Domain.Owner.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Kennel.Domain.Owner.LastName", "LastName", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Kennel.Domain.Owner.OwnerId", "Id", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Kennel.Domain.Owner.PhoneNo", "PhoneNo", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Kennel.Domain.Owner.Street", "Street", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsOne("Kennel.Domain.Owner.Zipcode", "Zipcode", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("City");

                    b.Navigation("Email");

                    b.Navigation("FirstName");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("LastName");

                    b.Navigation("PhoneNo");

                    b.Navigation("Street");

                    b.Navigation("Zipcode");
                });

            modelBuilder.Entity("Kennel.Domain.Protokol.Protokol", b =>
                {
                    b.HasOne("Kennel.Domain.Kennel.Kennel", "Kennel")
                        .WithOne("Protokol")
                        .HasForeignKey("Kennel.Domain.Protokol.Protokol", "KennelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Kennel.Domain.Protokol.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("ProtokolId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("ProtokolId");

                            b1.ToTable("Protokols");

                            b1.WithOwner()
                                .HasForeignKey("ProtokolId");
                        });

                    b.OwnsOne("Kennel.Domain.Protokol.ProtokolId", "Id", b1 =>
                        {
                            b1.Property<Guid>("ProtokolId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ProtokolId");

                            b1.ToTable("Protokols");

                            b1.WithOwner()
                                .HasForeignKey("ProtokolId");
                        });

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("Kennel");
                });

            modelBuilder.Entity("Kennel.Domain.Vaccination.Vaccination", b =>
                {
                    b.HasOne("Kennel.Domain.HealthRecord.HealthRecord", "HealthRecord")
                        .WithMany("Vaccinations")
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Kennel.Domain.Vaccination.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("VaccinationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("VaccinationId");

                            b1.ToTable("Vaccinations");

                            b1.WithOwner()
                                .HasForeignKey("VaccinationId");
                        });

                    b.OwnsOne("Kennel.Domain.Vaccination.VaccinationDate", "VaccinationDate", b1 =>
                        {
                            b1.Property<Guid>("VaccinationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("VaccinationId");

                            b1.ToTable("Vaccinations");

                            b1.WithOwner()
                                .HasForeignKey("VaccinationId");
                        });

                    b.OwnsOne("Kennel.Domain.Vaccination.VaccinationId", "Id", b1 =>
                        {
                            b1.Property<Guid>("VaccinationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("VaccinationId");

                            b1.ToTable("Vaccinations");

                            b1.WithOwner()
                                .HasForeignKey("VaccinationId");
                        });

                    b.OwnsOne("Kennel.Domain.Vaccination.VaccinationName", "VaccinationName", b1 =>
                        {
                            b1.Property<Guid>("VaccinationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("VaccinationId");

                            b1.ToTable("Vaccinations");

                            b1.WithOwner()
                                .HasForeignKey("VaccinationId");
                        });

                    b.Navigation("HealthRecord");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("VaccinationDate");

                    b.Navigation("VaccinationName");
                });

            modelBuilder.Entity("Kennel.Domain.Animal.Animal", b =>
                {
                    b.Navigation("HealthRecord");

                    b.Navigation("Litters");
                });

            modelBuilder.Entity("Kennel.Domain.HealthRecord.HealthRecord", b =>
                {
                    b.Navigation("Diseases");

                    b.Navigation("HealthCertificates");

                    b.Navigation("Vaccinations");
                });

            modelBuilder.Entity("Kennel.Domain.Kennel.Kennel", b =>
                {
                    b.Navigation("Protokol");
                });

            modelBuilder.Entity("Kennel.Domain.Litter.Litter", b =>
                {
                    b.Navigation("Parrents");
                });

            modelBuilder.Entity("Kennel.Domain.Owner.Owner", b =>
                {
                    b.Navigation("Kennel");
                });

            modelBuilder.Entity("Kennel.Domain.Protokol.Protokol", b =>
                {
                    b.Navigation("Animals");
                });
#pragma warning restore 612, 618
        }
    }
}
