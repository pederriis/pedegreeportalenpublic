// <auto-generated />
using System;
using MatingCalculator.Infrastructure.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MatingCalculator.Infrastructure.Migrations
{
    [DbContext(typeof(MatingCalculatorDbContext))]
    [Migration("20210505083311_m4")]
    partial class m4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MatingCalculator.Domain.Contract.Contract", b =>
                {
                    b.Property<Guid>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatingCalculationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContractId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("MatingCalculator.Domain.Disease.Disease", b =>
                {
                    b.Property<Guid>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DogId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiseaseId");

                    b.HasIndex("DogId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("MatingCalculator.Domain.Dog.Dog", b =>
                {
                    b.Property<Guid>("DogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatingCalculationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DogId");

                    b.HasIndex("MatingCalculationId");

                    b.ToTable("Dogs");
                });

            modelBuilder.Entity("MatingCalculator.Domain.DogLitter.DogLitter", b =>
                {
                    b.Property<Guid>("DogLitterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LitterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DogLitterId");

                    b.HasIndex("DogId");

                    b.HasIndex("LitterId");

                    b.ToTable("DogLitters");
                });

            modelBuilder.Entity("MatingCalculator.Domain.Litter.Litter", b =>
                {
                    b.Property<Guid>("LitterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LitterId");

                    b.ToTable("Litters");
                });

            modelBuilder.Entity("MatingCalculator.Domain.MatingCalculation.MatingCalculation", b =>
                {
                    b.Property<Guid>("MatingCalculationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatingRulesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatingCalculationId");

                    b.HasIndex("MatingRulesId");

                    b.ToTable("MatingCalculations");
                });

            modelBuilder.Entity("MatingCalculator.Domain.MatingRules.MatingRules", b =>
                {
                    b.Property<Guid>("MatingRulesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatingRulesId");

                    b.ToTable("MatingRules");
                });

            modelBuilder.Entity("MatingCalculator.Domain.Userinformation.Userinformation", b =>
                {
                    b.Property<Guid>("UserinformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserinformationId");

                    b.HasIndex("ContractId");

                    b.ToTable("Userinformations");
                });

            modelBuilder.Entity("MatingCalculator.Domain.Contract.Contract", b =>
                {
                    b.OwnsOne("MatingCalculator.Domain.Contract.ContractId", "Id", b1 =>
                        {
                            b1.Property<Guid>("ContractId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ContractId");

                            b1.ToTable("Contracts");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Contract.CreationDate", "CreationDate", b1 =>
                        {
                            b1.Property<Guid>("ContractId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("ContractId");

                            b1.ToTable("Contracts");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Contract.FemaleDogName", "FemaleDogName", b1 =>
                        {
                            b1.Property<Guid>("ContractId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ContractId");

                            b1.ToTable("Contracts");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Contract.FemaleDogOwnerName", "FemaleDogOwnerName", b1 =>
                        {
                            b1.Property<Guid>("ContractId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ContractId");

                            b1.ToTable("Contracts");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Contract.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("ContractId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("ContractId");

                            b1.ToTable("Contracts");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Contract.MaleDogName", "MaleDogName", b1 =>
                        {
                            b1.Property<Guid>("ContractId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ContractId");

                            b1.ToTable("Contracts");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Contract.MaleDogOwnerName", "MaleDogOwnerName", b1 =>
                        {
                            b1.Property<Guid>("ContractId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ContractId");

                            b1.ToTable("Contracts");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Contract.MatingDate", "MatingDate", b1 =>
                        {
                            b1.Property<Guid>("ContractId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("ContractId");

                            b1.ToTable("Contracts");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.Navigation("CreationDate");

                    b.Navigation("FemaleDogName");

                    b.Navigation("FemaleDogOwnerName");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("MaleDogName");

                    b.Navigation("MaleDogOwnerName");

                    b.Navigation("MatingDate");
                });

            modelBuilder.Entity("MatingCalculator.Domain.Disease.Disease", b =>
                {
                    b.HasOne("MatingCalculator.Domain.Dog.Dog", "Dog")
                        .WithMany("Diseases")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MatingCalculator.Domain.Disease.Date", "Date", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Disease.DiseaseId", "Id", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Disease.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Disease.IsHereditary", "IsHereditary", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Disease.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Disease.Note", "Note", b1 =>
                        {
                            b1.Property<Guid>("DiseaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DiseaseId");

                            b1.ToTable("Diseases");

                            b1.WithOwner()
                                .HasForeignKey("DiseaseId");
                        });

                    b.Navigation("Date");

                    b.Navigation("Dog");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("IsHereditary");

                    b.Navigation("Name");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("MatingCalculator.Domain.Dog.Dog", b =>
                {
                    b.HasOne("MatingCalculator.Domain.MatingCalculation.MatingCalculation", "MatingCalculation")
                        .WithMany()
                        .HasForeignKey("MatingCalculationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MatingCalculator.Domain.Dog.ChildAmount", "ChildAmount", b1 =>
                        {
                            b1.Property<Guid>("DogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("DogId");

                            b1.ToTable("Dogs");

                            b1.WithOwner()
                                .HasForeignKey("DogId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Dog.DogId", "Id", b1 =>
                        {
                            b1.Property<Guid>("DogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("DogId");

                            b1.ToTable("Dogs");

                            b1.WithOwner()
                                .HasForeignKey("DogId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Dog.Gender", "Gender", b1 =>
                        {
                            b1.Property<Guid>("DogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("DogId");

                            b1.ToTable("Dogs");

                            b1.WithOwner()
                                .HasForeignKey("DogId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Dog.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("DogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("DogId");

                            b1.ToTable("Dogs");

                            b1.WithOwner()
                                .HasForeignKey("DogId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Dog.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("DogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DogId");

                            b1.ToTable("Dogs");

                            b1.WithOwner()
                                .HasForeignKey("DogId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Dog.RaceId", "RaceId", b1 =>
                        {
                            b1.Property<Guid>("DogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("DogId");

                            b1.ToTable("Dogs");

                            b1.WithOwner()
                                .HasForeignKey("DogId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Dog.SubRaceId", "SubRaceId", b1 =>
                        {
                            b1.Property<Guid>("DogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("DogId");

                            b1.ToTable("Dogs");

                            b1.WithOwner()
                                .HasForeignKey("DogId");
                        });

                    b.Navigation("ChildAmount");

                    b.Navigation("Gender");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("MatingCalculation");

                    b.Navigation("Name");

                    b.Navigation("RaceId");

                    b.Navigation("SubRaceId");
                });

            modelBuilder.Entity("MatingCalculator.Domain.DogLitter.DogLitter", b =>
                {
                    b.HasOne("MatingCalculator.Domain.Dog.Dog", "Dog")
                        .WithMany("Litters")
                        .HasForeignKey("DogId");

                    b.HasOne("MatingCalculator.Domain.Litter.Litter", "Litter")
                        .WithMany("Parents")
                        .HasForeignKey("LitterId");

                    b.OwnsOne("MatingCalculator.Domain.DogLitter.DogLitterId", "Id", b1 =>
                        {
                            b1.Property<Guid>("DogLitterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("DogLitterId");

                            b1.ToTable("DogLitters");

                            b1.WithOwner()
                                .HasForeignKey("DogLitterId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.DogLitter.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("DogLitterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("DogLitterId");

                            b1.ToTable("DogLitters");

                            b1.WithOwner()
                                .HasForeignKey("DogLitterId");
                        });

                    b.Navigation("Dog");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("Litter");
                });

            modelBuilder.Entity("MatingCalculator.Domain.Litter.Litter", b =>
                {
                    b.OwnsOne("MatingCalculator.Domain.Litter.Date", "Date", b1 =>
                        {
                            b1.Property<Guid>("LitterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("LitterId");

                            b1.ToTable("Litters");

                            b1.WithOwner()
                                .HasForeignKey("LitterId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Litter.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("LitterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("LitterId");

                            b1.ToTable("Litters");

                            b1.WithOwner()
                                .HasForeignKey("LitterId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Litter.LitterId", "Id", b1 =>
                        {
                            b1.Property<Guid>("LitterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("LitterId");

                            b1.ToTable("Litters");

                            b1.WithOwner()
                                .HasForeignKey("LitterId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Litter.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("LitterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LitterId");

                            b1.ToTable("Litters");

                            b1.WithOwner()
                                .HasForeignKey("LitterId");
                        });

                    b.Navigation("Date");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("MatingCalculator.Domain.MatingCalculation.MatingCalculation", b =>
                {
                    b.HasOne("MatingCalculator.Domain.Contract.Contract", "Contract")
                        .WithOne("MatingCalculation")
                        .HasForeignKey("MatingCalculator.Domain.MatingCalculation.MatingCalculation", "MatingCalculationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatingCalculator.Domain.MatingRules.MatingRules", "MatingRules")
                        .WithMany("MatingCalculations")
                        .HasForeignKey("MatingRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MatingCalculator.Domain.MatingCalculation.ExpectedChildren", "ExpectedChildren", b1 =>
                        {
                            b1.Property<Guid>("MatingCalculationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("MatingCalculationId");

                            b1.ToTable("MatingCalculations");

                            b1.WithOwner()
                                .HasForeignKey("MatingCalculationId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.MatingCalculation.InbreedingPercent", "InbreedingPercent", b1 =>
                        {
                            b1.Property<Guid>("MatingCalculationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Value")
                                .HasColumnType("float");

                            b1.HasKey("MatingCalculationId");

                            b1.ToTable("MatingCalculations");

                            b1.WithOwner()
                                .HasForeignKey("MatingCalculationId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.MatingCalculation.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("MatingCalculationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("MatingCalculationId");

                            b1.ToTable("MatingCalculations");

                            b1.WithOwner()
                                .HasForeignKey("MatingCalculationId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.MatingCalculation.IsLegal", "IsLegal", b1 =>
                        {
                            b1.Property<Guid>("MatingCalculationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("MatingCalculationId");

                            b1.ToTable("MatingCalculations");

                            b1.WithOwner()
                                .HasForeignKey("MatingCalculationId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.MatingCalculation.LitterAmount", "LitterAmount", b1 =>
                        {
                            b1.Property<Guid>("MatingCalculationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("MatingCalculationId");

                            b1.ToTable("MatingCalculations");

                            b1.WithOwner()
                                .HasForeignKey("MatingCalculationId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.MatingCalculation.MatingCalculationId", "Id", b1 =>
                        {
                            b1.Property<Guid>("MatingCalculationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("MatingCalculationId");

                            b1.ToTable("MatingCalculations");

                            b1.WithOwner()
                                .HasForeignKey("MatingCalculationId");
                        });

                    b.Navigation("Contract");

                    b.Navigation("ExpectedChildren");

                    b.Navigation("Id");

                    b.Navigation("InbreedingPercent");

                    b.Navigation("IsDeleted");

                    b.Navigation("IsLegal");

                    b.Navigation("LitterAmount");

                    b.Navigation("MatingRules");
                });

            modelBuilder.Entity("MatingCalculator.Domain.MatingRules.MatingRules", b =>
                {
                    b.OwnsOne("MatingCalculator.Domain.MatingRules.InbreedingPercent", "InbreedingPercent", b1 =>
                        {
                            b1.Property<Guid>("MatingRulesId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Value")
                                .HasColumnType("float");

                            b1.HasKey("MatingRulesId");

                            b1.ToTable("MatingRules");

                            b1.WithOwner()
                                .HasForeignKey("MatingRulesId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.MatingRules.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("MatingRulesId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("MatingRulesId");

                            b1.ToTable("MatingRules");

                            b1.WithOwner()
                                .HasForeignKey("MatingRulesId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.MatingRules.LitterAmount", "LitterAmount", b1 =>
                        {
                            b1.Property<Guid>("MatingRulesId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("MatingRulesId");

                            b1.ToTable("MatingRules");

                            b1.WithOwner()
                                .HasForeignKey("MatingRulesId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.MatingRules.MatingRulesId", "Id", b1 =>
                        {
                            b1.Property<Guid>("MatingRulesId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("MatingRulesId");

                            b1.ToTable("MatingRules");

                            b1.WithOwner()
                                .HasForeignKey("MatingRulesId");
                        });

                    b.Navigation("Id");

                    b.Navigation("InbreedingPercent");

                    b.Navigation("IsDeleted");

                    b.Navigation("LitterAmount");
                });

            modelBuilder.Entity("MatingCalculator.Domain.Userinformation.Userinformation", b =>
                {
                    b.HasOne("MatingCalculator.Domain.Contract.Contract", "Contract")
                        .WithMany("Userinformations")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MatingCalculator.Domain.Userinformation.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserinformationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserinformationId");

                            b1.ToTable("Userinformations");

                            b1.WithOwner()
                                .HasForeignKey("UserinformationId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Userinformation.IsDeleted", "IsDeleted", b1 =>
                        {
                            b1.Property<Guid>("UserinformationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("bit");

                            b1.HasKey("UserinformationId");

                            b1.ToTable("Userinformations");

                            b1.WithOwner()
                                .HasForeignKey("UserinformationId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Userinformation.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserinformationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserinformationId");

                            b1.ToTable("Userinformations");

                            b1.WithOwner()
                                .HasForeignKey("UserinformationId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Userinformation.PhoneNo", "PhoneNo", b1 =>
                        {
                            b1.Property<Guid>("UserinformationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserinformationId");

                            b1.ToTable("Userinformations");

                            b1.WithOwner()
                                .HasForeignKey("UserinformationId");
                        });

                    b.OwnsOne("MatingCalculator.Domain.Userinformation.UserinformationId", "Id", b1 =>
                        {
                            b1.Property<Guid>("UserinformationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("UserinformationId");

                            b1.ToTable("Userinformations");

                            b1.WithOwner()
                                .HasForeignKey("UserinformationId");
                        });

                    b.Navigation("Contract");

                    b.Navigation("Email");

                    b.Navigation("Id");

                    b.Navigation("IsDeleted");

                    b.Navigation("Name");

                    b.Navigation("PhoneNo");
                });

            modelBuilder.Entity("MatingCalculator.Domain.Contract.Contract", b =>
                {
                    b.Navigation("MatingCalculation");

                    b.Navigation("Userinformations");
                });

            modelBuilder.Entity("MatingCalculator.Domain.Dog.Dog", b =>
                {
                    b.Navigation("Diseases");

                    b.Navigation("Litters");
                });

            modelBuilder.Entity("MatingCalculator.Domain.Litter.Litter", b =>
                {
                    b.Navigation("Parents");
                });

            modelBuilder.Entity("MatingCalculator.Domain.MatingRules.MatingRules", b =>
                {
                    b.Navigation("MatingCalculations");
                });
#pragma warning restore 612, 618
        }
    }
}
